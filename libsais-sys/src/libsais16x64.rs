/* automatically generated by rust-bindgen 0.72.0 and slightly edited */

pub const LIBSAIS16X64_VERSION_MAJOR: u32 = 2;
pub const LIBSAIS16X64_VERSION_MINOR: u32 = 10;
pub const LIBSAIS16X64_VERSION_PATCH: u32 = 2;
pub const LIBSAIS16X64_VERSION_STRING: &str = "2.10.2";

unsafe extern "C" {
    /// Constructs the suffix array of a given 16-bit string.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `SA` - [0..n-1+fs] The output array of suffixes.
    /// * `n` - The length of the given 16-bit string.
    /// * `fs` - The extra space available at the end of SA array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64(T: *const u16, SA: *mut i64, n: i64, fs: i64, freq: *mut i64) -> i64;

    /// Constructs the generalized suffix array (GSA) of a given 16-bit string set.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string set using 0 as separators (T[n-1] must be 0).
    /// * `SA` - [0..n-1+fs] The output array of suffixes.
    /// * `n` - The length of the given 16-bit string set.
    /// * `fs` - The extra space available at the end of SA array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64_gsa(T: *const u16, SA: *mut i64, n: i64, fs: i64, freq: *mut i64) -> i64;

    /// Constructs the suffix array of a given integer array.Note, during construction input array will be modified, but restored at the end if no errors occurred.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input integer array.
    /// * `SA` - [0..n-1+fs] The output array of suffixes.
    /// * `n` - The length of the integer array.
    /// * `k` - The alphabet size of the input integer array.
    /// * `fs` - Extra space available at the end of SA array (can be 0, but 4k or better 6k is recommended for optimal performance).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64_long(T: *mut i64, SA: *mut i64, n: i64, k: i64, fs: i64) -> i64;

    /// Constructs the suffix array of a given 16-bit string in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `SA` - [0..n-1+fs] The output array of suffixes.
    /// * `n` - The length of the given 16-bit string.
    /// * `fs` - The extra space available at the end of SA array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_omp(
        T: *const u16,
        SA: *mut i64,
        n: i64,
        fs: i64,
        freq: *mut i64,
        threads: i64,
    ) -> i64;

    /// Constructs the generalized suffix array (GSA) of a given 16-bit string set in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string set using 0 as separators (T[n-1] must be 0).
    /// * `SA` - [0..n-1+fs] The output array of suffixes.
    /// * `n` - The length of the given 16-bit string set.
    /// * `fs` - The extra space available at the end of SA array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_gsa_omp(
        T: *const u16,
        SA: *mut i64,
        n: i64,
        fs: i64,
        freq: *mut i64,
        threads: i64,
    ) -> i64;

    /// Constructs the suffix array of a given integer array in parallel using OpenMP.Note, during construction input array will be modified, but restored at the end if no errors occurred.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input integer array.
    /// * `SA` - [0..n-1+fs] The output array of suffixes.
    /// * `n` - The length of the integer array.
    /// * `k` - The alphabet size of the input integer array.
    /// * `fs` - Extra space available at the end of SA array (can be 0, but 4k or better 6k is recommended for optimal performance).
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_long_omp(
        T: *mut i64,
        SA: *mut i64,
        n: i64,
        k: i64,
        fs: i64,
        threads: i64,
    ) -> i64;

    /// Constructs the burrows-wheeler transformed 16-bit string (BWT) of a given 16-bit string.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n-1+fs] The temporary array.
    /// * `n` - The length of the given 16-bit string.
    /// * `fs` - The extra space available at the end of A array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    ///
    /// # Returns
    ///
    /// The primary index if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64_bwt(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        fs: i64,
        freq: *mut i64,
    ) -> i64;

    /// Constructs the burrows-wheeler transformed 16-bit string (BWT) of a given 16-bit string with auxiliary indexes.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n-1+fs] The temporary array.
    /// * `n` - The length of the given 16-bit string.
    /// * `fs` - The extra space available at the end of A array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    /// * `r` - The sampling rate for auxiliary indexes (must be power of 2).
    /// * `I` - [0..(n-1)/r] The output auxiliary indexes.
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64_bwt_aux(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        fs: i64,
        freq: *mut i64,
        r: i64,
        I: *mut i64,
    ) -> i64;

    /// Constructs the burrows-wheeler transformed 16-bit string (BWT) of a given 16-bit string in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n-1+fs] The temporary array.
    /// * `n` - The length of the given 16-bit string.
    /// * `fs` - The extra space available at the end of A array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// The primary index if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_bwt_omp(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        fs: i64,
        freq: *mut i64,
        threads: i64,
    ) -> i64;

    /// Constructs the burrows-wheeler transformed 16-bit string (BWT) of a given 16-bit string with auxiliary indexes in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n-1+fs] The temporary array.
    /// * `n` - The length of the given 16-bit string.
    /// * `fs` - The extra space available at the end of A array (0 should be enough for most cases).
    /// * `freq` - [0..65535] The output 16-bit symbol frequency table (can be NULL).
    /// * `r` - The sampling rate for auxiliary indexes (must be power of 2).
    /// * `I` - [0..(n-1)/r] The output auxiliary indexes.
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_bwt_aux_omp(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        fs: i64,
        freq: *mut i64,
        r: i64,
        I: *mut i64,
        threads: i64,
    ) -> i64;

    /// Constructs the original 16-bit string from a given burrows-wheeler transformed 16-bit string (BWT) with primary index.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n] The temporary array (NOTE, temporary array must be n + 1 size).
    /// * `n` - The length of the given 16-bit string.
    /// * `freq` - [0..65535] The input 16-bit symbol frequency table (can be NULL).
    /// * `i` - The primary index.
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64_unbwt(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        freq: *const i64,
        i: i64,
    ) -> i64;

    /// Constructs the original 16-bit string from a given burrows-wheeler transformed 16-bit string (BWT) with auxiliary indexes.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n] The temporary array (NOTE, temporary array must be n + 1 size).
    /// * `n` - The length of the given 16-bit string.
    /// * `freq` - [0..65535] The input 16-bit symbol frequency table (can be NULL).
    /// * `r` - The sampling rate for auxiliary indexes (must be power of 2).
    /// * `I` - [0..(n-1)/r] The input auxiliary indexes.
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    pub fn libsais16x64_unbwt_aux(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        freq: *const i64,
        r: i64,
        I: *const i64,
    ) -> i64;

    /// Constructs the original 16-bit string from a given burrows-wheeler transformed 16-bit string (BWT) with primary index in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n] The temporary array (NOTE, temporary array must be n + 1 size).
    /// * `n` - The length of the given 16-bit string.
    /// * `freq` - [0..65535] The input 16-bit symbol frequency table (can be NULL).
    /// * `i` - The primary index.
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_unbwt_omp(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        freq: *const i64,
        i: i64,
        threads: i64,
    ) -> i64;

    /// Constructs the original 16-bit string from a given burrows-wheeler transformed 16-bit string (BWT) with auxiliary indexes in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `U` - [0..n-1] The output 16-bit string (can be T).
    /// * `A` - [0..n] The temporary array (NOTE, temporary array must be n + 1 size).
    /// * `n` - The length of the given 16-bit string.
    /// * `freq` - [0..65535] The input 16-bit symbol frequency table (can be NULL).
    /// * `r` - The sampling rate for auxiliary indexes (must be power of 2).
    /// * `I` - [0..(n-1)/r] The input auxiliary indexes.
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 or -2 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_unbwt_aux_omp(
        T: *const u16,
        U: *mut u16,
        A: *mut i64,
        n: i64,
        freq: *const i64,
        r: i64,
        I: *const i64,
        threads: i64,
    ) -> i64;

    /// Constructs the permuted longest common prefix array (PLCP) of a given 16-bit string and a suffix array.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `SA` - [0..n-1] The input suffix array.
    /// * `PLCP` - [0..n-1] The output permuted longest common prefix array.
    /// * `n` - The length of the 16-bit string and the suffix array.
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 otherwise.
    pub fn libsais16x64_plcp(T: *const u16, SA: *const i64, PLCP: *mut i64, n: i64) -> i64;

    /// Constructs the permuted longest common prefix array (PLCP) of a given 16-bit string set and a generalized suffix array (GSA).
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string set using 0 as separators (T[n-1] must be 0).
    /// * `SA` - [0..n-1] The input generalized suffix array.
    /// * `PLCP` - [0..n-1] The output permuted longest common prefix array.
    /// * `n` - The length of the string set and the generalized suffix array.
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 otherwise.
    pub fn libsais16x64_plcp_gsa(T: *const u16, SA: *const i64, PLCP: *mut i64, n: i64) -> i64;

    /// Constructs the longest common prefix array (LCP) of a given permuted longest common prefix array (PLCP) and a suffix array.
    ///
    /// # Arguments
    ///
    /// * `PLCP` - [0..n-1] The input permuted longest common prefix array.
    /// * `SA` - [0..n-1] The input suffix array or generalized suffix array (GSA).
    /// * `LCP` - [0..n-1] The output longest common prefix array (can be SA).
    /// * `n` - The length of the permuted longest common prefix array and the suffix array.
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 otherwise.
    pub fn libsais16x64_lcp(PLCP: *const i64, SA: *const i64, LCP: *mut i64, n: i64) -> i64;

    /// Constructs the permuted longest common prefix array (PLCP) of a given 16-bit string and a suffix array in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string.
    /// * `SA` - [0..n-1] The input suffix array.
    /// * `PLCP` - [0..n-1] The output permuted longest common prefix array.
    /// * `n` - The length of the 16-bit string and the suffix array.
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_plcp_omp(
        T: *const u16,
        SA: *const i64,
        PLCP: *mut i64,
        n: i64,
        threads: i64,
    ) -> i64;

    /// Constructs the permuted longest common prefix array (PLCP) of a given 16-bit string set and a generalized suffix array (GSA) in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `T` - [0..n-1] The input 16-bit string set using 0 as separators (T[n-1] must be 0).
    /// * `SA` - [0..n-1] The input generalized suffix array.
    /// * `PLCP` - [0..n-1] The output permuted longest common prefix array.
    /// * `n` - The length of the string set and the generalized suffix array.
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_plcp_gsa_omp(
        T: *const u16,
        SA: *const i64,
        PLCP: *mut i64,
        n: i64,
        threads: i64,
    ) -> i64;

    /// Constructs the longest common prefix array (LCP) of a given permuted longest common prefix array (PLCP) and a suffix array in parallel using OpenMP.
    ///
    /// # Arguments
    ///
    /// * `PLCP` - [0..n-1] The input permuted longest common prefix array.
    /// * `SA` - [0..n-1] The input suffix array or generalized suffix array (GSA).
    /// * `LCP` - [0..n-1] The output longest common prefix array (can be SA).
    /// * `n` - The length of the permuted longest common prefix array and the suffix array.
    /// * `threads` - The number of OpenMP threads to use (can be 0 for OpenMP default).
    ///
    /// # Returns
    ///
    /// 0 if no error occurred, -1 otherwise.
    #[cfg(feature = "openmp")]
    #[cfg_attr(docsrs, doc(cfg(feature = "openmp")))]
    pub fn libsais16x64_lcp_omp(
        PLCP: *const i64,
        SA: *const i64,
        LCP: *mut i64,
        n: i64,
        threads: i64,
    ) -> i64;
}
